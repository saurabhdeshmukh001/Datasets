import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class Item {
    int weight;
    int value;

    // Constructor
    public Item(int weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

class FractionalKnapsack {
    // Function to get the maximum value
    public static double getMaxValue(Item[] items, int capacity) {
        // Sort items by descending value-to-weight ratio
        Arrays.sort(items, new Comparator<Item>() {
            @Override
            public int compare(Item item1, Item item2) {
                double r1 = (double)item1.value / item1.weight;
                double r2 = (double)item2.value / item2.weight;
                return Double.compare(r2, r1);
            }
        });

        double totalValue = 0; // Total value accumulated in the knapsack
        for (Item item : items) {
            if (capacity - item.weight >= 0) { // If item can fit, take all of it
                capacity -= item.weight;
                totalValue += item.value;
            } else { // Take the fraction of the last item that fits
                double fraction = ((double) capacity / item.weight);
                totalValue += item.value * fraction;
                break; // Knapsack is full
            }
        }

        return totalValue;
    }

    // Main method
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take the number of items as input
        System.out.print("Enter the number of items: ");
        int n = scanner.nextInt();

        Item[] items = new Item[n];
        // Take weight and value of each item as input
        for (int i = 0; i < n; i++) {
            System.out.print("Enter weight and value of item " + (i + 1) + ": ");
            int weight = scanner.nextInt();
            int value = scanner.nextInt();
            items[i] = new Item(weight, value);
        }

        // Take knapsack capacity as input
        System.out.print("Enter the capacity of the knapsack: ");
        int capacity = scanner.nextInt();

        double maxValue = getMaxValue(items, capacity);
        System.out.println("Maximum value we can obtain = " + maxValue);
        
        scanner.close();
    }
}
