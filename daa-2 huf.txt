import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

// Node class for Huffman Tree
class Node {
    char character;
    int frequency;
    Node left, right;

    // Constructor
    public Node(char character, int frequency) {
        this.character = character;
        this.frequency = frequency;
        this.left = null;
        this.right = null;
    }

    // Constructor for merging nodes
    public Node(int frequency, Node left, Node right) {
        this.character = '\0';  // Non-leaf nodes do not contain characters
        this.frequency = frequency;
        this.left = left;
        this.right = right;
    }
}

public class HuffmanEncoding {

    // Generate Huffman Codes
    public static void generateCodes(Node root, String code, Map<Character, String> huffmanCodes) {
        if (root == null) {
            return;
        }

        // If it's a leaf node, save the code
        if (root.left == null && root.right == null) {
            huffmanCodes.put(root.character, code);
        }

        // Traverse left (0) and right (1)
        generateCodes(root.left, code + "0", huffmanCodes);
        generateCodes(root.right, code + "1", huffmanCodes);
    }

    // Build Huffman Tree
    public static Node buildHuffmanTree(Map<Character, Integer> frequencyMap) {
        PriorityQueue<Node> priorityQueue = new PriorityQueue<>((a, b) -> a.frequency - b.frequency);

        // Create a leaf node for each character and add it to the priority queue
       // for (var entry : frequencyMap.entrySet()) {
       //     priorityQueue.add(new Node(entry.getKey(), entry.getValue()));
       // }
       for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
    priorityQueue.add(new Node(entry.getKey(), entry.getValue()));
}

        // Merge nodes until we get the root of the Huffman tree
        while (priorityQueue.size() > 1) {
            Node left = priorityQueue.poll();
            Node right = priorityQueue.poll();

            // Create a new internal node with a frequency equal to the sum of the two nodes
            Node merged = new Node(left.frequency + right.frequency, left, right);
            priorityQueue.add(merged);
        }

        // Root node of the Huffman tree
        return priorityQueue.poll();
    }

    // Main function to perform Huffman Encoding
    public static Map<Character, String> huffmanEncoding(String text) {
        // Step 1: Count frequency of each character
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : text.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        // Step 2: Build Huffman Tree
        Node root = buildHuffmanTree(frequencyMap);

        // Step 3: Generate Huffman Codes
        Map<Character, String> huffmanCodes = new HashMap<>();
        generateCodes(root, "", huffmanCodes);

        return huffmanCodes;
    }

    public static void main(String[] args) {
        String text = "huffman encoding example";

        // Get Huffman codes
        Map<Character, String> huffmanCodes = huffmanEncoding(text);
        System.out.println("Huffman Codes: " + huffmanCodes);

        // Encode the text
        StringBuilder encodedString = new StringBuilder();
        for (char c : text.toCharArray()) {
            encodedString.append(huffmanCodes.get(c));
        }

        System.out.println("Encoded Text: " + encodedString);
    }
}
